generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @unique @default(autoincrement())
  name            String        @db.VarChar(64)
  email           String        @unique @db.VarChar(64) 
  password        String        @db.VarChar(32) 
  active          Boolean?      @db.Boolean @default(false)
  activationCode  String?       @db.VarChar(16)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  refreshTokens   RefreshToken[]
  books           Book[]

  @@map("user")
}

model RefreshToken {
  id              String    @id @unique @db.VarChar(128)
  email           String    @db.VarChar(64)
  userId          Int          
  iat             String    @db.VarChar(10)
  exp             String    @db.VarChar(10)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id]) 

  @@map("refreshToken")
}

model Book {
  bookId          Int           @id @unique @default(autoincrement())
  userId          Int
  title           String        @db.VarChar(128)
  author          String?       @db.VarChar(128)
  isbn10          String?       @db.VarChar(10)
  isbn13          String?       @db.VarChar(13)
  publisher       String?       @db.VarChar(128)
  description     String?       @db.Text
  thumbnail       String?       @db.VarChar(255)
  readStatus      ReadStatus?   @default(NO_STATUS)
  borrowStatus    BorrowStatus? @default(RETURNED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])

  @@map("book")
}

enum BorrowStatus {
  PENDING
  RETURNED
}

enum ReadStatus {
  PLANNING
  READING
  CONCLUDED
  DROPPED
  NO_STATUS
}