generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @unique @default(autoincrement())
  name           String   @db.VarChar(64)
  email          String   @unique @db.VarChar(64)
  password       String   @db.VarChar(32)
  active         Boolean? @default(false) @db.Boolean
  activationCode String?  @db.VarChar(16)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  refreshTokens RefreshToken[]
  books         Book[]
  annotations   Annotation[]
  borrows       Borrow[]
  recovers      Recover[]

  @@map("user")
}

model RefreshToken {
  id        String   @id @unique @db.VarChar(128)
  email     String   @db.VarChar(64)
  userId    Int
  iat       String   @db.VarChar(10)
  exp       String   @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("refreshToken")
}

model Book {
  id          Int         @id @unique @default(autoincrement())
  userId      Int
  title       String      @db.VarChar(128)
  author      String?     @db.VarChar(128)
  isbn10      String?     @db.VarChar(10)
  isbn13      String?     @db.VarChar(13)
  publisher   String?     @db.VarChar(128)
  description String?     @db.Text
  thumbnail   String?     @db.VarChar(255)
  readStatus  ReadStatus? @default(PLANNING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  annotations Annotation[]
  borrows     Borrow[]

  @@map("book")
}

model Annotation {
  id        Int      @id @unique @default(autoincrement())
  userId    Int
  bookId    Int
  title     String   @db.VarChar(128)
  text      String   @db.Text
  reference String?  @db.VarChar(128)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("annotation")
}

model Borrow {
  id             Int          @id @unique @default(autoincrement())
  userId         Int
  bookId         Int
  contactName    String       @db.VarChar(64)
  borrowStatus   BorrowStatus @default(PENDING)
  borrowDate     DateTime     @default(now())
  devolutionDate DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("borrow")
}

model Recover {
  id        Int      @id @unique @default(autoincrement())
  userId    Int
  code      String   @db.VarChar(16)
  active    Boolean  @default(false) @db.Boolean
  redeemed  Boolean  @default(false) @db.Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("recover")
}

enum BorrowStatus {
  PENDING
  RETURNED
}

enum ReadStatus {
  PLANNING
  READING
  CONCLUDED
  DROPPED
}
